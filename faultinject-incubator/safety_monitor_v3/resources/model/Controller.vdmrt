-- DESTECS (Design Support and Tooling for Embedded Control Software)
-- Grant Agreement Number: INFSO-ICT-248134
-- Seventh Framework Programme
-- WaterTank project: introductory project to the DESTECS tool.
-- More details can be found at DESTECS User Manual, chapter 6.
class Controller


instance variables

  realInputs   : RealInputs;
  realOutputs : RealOutputs;
  no_obstacles : int := 0;

  no_obstacles_str : seq of char := [];
values


operations

public Controller : RealInputs * RealOutputs  ==> Controller
Controller(ins, outs)==
(
  realInputs   := ins;
  realOutputs := outs;
 );

private loop : () ==>()
loop()==
	cycles(2)
   (-- retrieve the first value from Co-SIM
   
   let 
   	in1 : real = realInputs.getInput1()
   	in 
   		let 
   			in2 : real = realInputs.getInput2() 
   			in
   			  let
   			  		in3 : real = realInputs.getInput3()
   			  		in
   			  			let
   			  					in4 : real = realInputs.getInput4()
   			  					in
						   				( 
						   				realOutputs.setOutput1(in1);
						   				realOutputs.setOutput2(in2);
						   				realOutputs.setOutput3(in3);
						   				realOutputs.setOutput4(in4);
						   				let temp_dst : real = MATH`sqrt((in1-in3)*(in1-in3) + (in2-in4)*(in2-in4))
							   				in(
							   				realOutputs.setDist_out12_out34(temp_dst);
							   				let 
							   					in5 : Port`String = realInputs.getInput5()
							   				in(
								   				--IO`printf("%1$5s HELLO\n", [x]););
								   				IO`printf("Obstacles are located at %1$5s \n", [in5]);
								   				--for el in in5 do
								   					--(
								   						--IO`printf("el: %1$5s, length of input: \n", [el, len [in5]]);
								   					--);
								   					--(dcl i : int := 1;
								   					--	(dcl el : char := in5(i);
										   			--			while (el <> ':' and i <= len in5) do 
														--			 ( 
														--			  no_obstacles_str := conc [no_obstacles_str, [el]];
														--			  i := i + 1;
														--			  IO`printf("i: %1$5s, el: %1$5s, length of input: \n", [i, el, len in5]);
														--			  el := in5(i);
														--			 );
												   	--			IO`printf("There are %1$5s obstacles in total\n", [no_obstacles_str]);
										   			--	);
								   					--);
							   					);
							   				if (	temp_dst < HardwareInterface`safety_dist.getValue() )
							   				--then IO`printf("Safety Requirement [Distance] violated. Is: %f, should be bigger %f\n", [temp_dst, HardwareInterface`safety_dist])
							   				--then IO`printf("%d\n", [2]);
							   				--then realOutputs.setDist_out12_out34(temp_dst);
							   				then (realOutputs.setFlag(true); realOutputs.setCStop(true);IO`printf("Safety Requirement [Distance] violated. Is: %1$5s, should be bigger than %1$5s\n", [temp_dst, HardwareInterface`safety_dist]);)
							   				else (realOutputs.setFlag(false); realOutputs.setCStop(false);)
							   				)
						   				));

thread
periodic(10E6,0,0,0)(loop);	 
		 
end Controller
